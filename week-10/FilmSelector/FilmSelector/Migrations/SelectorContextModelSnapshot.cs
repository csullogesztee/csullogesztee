// <auto-generated />
using FilmSelector.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace FilmSelector.Migrations
{
    [DbContext(typeof(SelectorContext))]
    partial class SelectorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FilmSelector.Models.Calendar", b =>
                {
                    b.Property<DateTime>("Date");

                    b.HasKey("Date");

                    b.ToTable("Calendar");
                });

            modelBuilder.Entity("FilmSelector.Models.Program", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<long?>("CreatorId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<double>("IMBBScore");

                    b.Property<string>("IMDBLink");

                    b.Property<string>("Style");

                    b.Property<string>("Title");

                    b.Property<string>("Type");

                    b.Property<bool>("Watched");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Date");

                    b.ToTable("Program");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Program");
                });

            modelBuilder.Entity("FilmSelector.Models.User", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FilmSelector.Models.Film", b =>
                {
                    b.HasBaseType("FilmSelector.Models.Program");

                    b.Property<int>("Year");

                    b.ToTable("Film");

                    b.HasDiscriminator().HasValue("Film");
                });

            modelBuilder.Entity("FilmSelector.Models.Series", b =>
                {
                    b.HasBaseType("FilmSelector.Models.Program");

                    b.Property<int>("Ended");

                    b.Property<string>("Language");

                    b.Property<int>("Seasons");

                    b.Property<int>("Started");

                    b.ToTable("Series");

                    b.HasDiscriminator().HasValue("Series");
                });

            modelBuilder.Entity("FilmSelector.Models.Program", b =>
                {
                    b.HasOne("FilmSelector.Models.User", "Creator")
                        .WithMany("Programs")
                        .HasForeignKey("CreatorId");

                    b.HasOne("FilmSelector.Models.Calendar")
                        .WithMany("Programs")
                        .HasForeignKey("Date")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
