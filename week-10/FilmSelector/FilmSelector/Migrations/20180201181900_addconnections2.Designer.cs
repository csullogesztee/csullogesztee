// <auto-generated />
using FilmSelector.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace FilmSelector.Migrations
{
    [DbContext(typeof(SelectorContext))]
    [Migration("20180201181900_addconnections2")]
    partial class addconnections2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FilmSelector.Models.Date", b =>
                {
                    b.Property<DateTime>("When");

                    b.Property<int?>("DailyFilmId");

                    b.Property<int?>("DailySeriesId");

                    b.HasKey("When");

                    b.HasIndex("DailyFilmId");

                    b.HasIndex("DailySeriesId");

                    b.ToTable("Dates");
                });

            modelBuilder.Entity("FilmSelector.Models.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<DateTime>("Date");

                    b.Property<double>("IMdB");

                    b.Property<string>("Link");

                    b.Property<bool>("Seen");

                    b.Property<string>("Title");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("FilmSelector.Models.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<DateTime>("Date");

                    b.Property<int>("EndYear");

                    b.Property<double>("IMdB");

                    b.Property<string>("Link");

                    b.Property<int>("Season");

                    b.Property<bool>("Seen");

                    b.Property<int>("StartYear");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("FilmSelector.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FilmSelector.Models.UserFilm", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("Id");

                    b.Property<int?>("FilmId");

                    b.HasKey("UserId", "Id");

                    b.HasIndex("FilmId");

                    b.ToTable("UserFilm");
                });

            modelBuilder.Entity("FilmSelector.Models.UserSeries", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("Id");

                    b.Property<int?>("SeriesId");

                    b.HasKey("UserId", "Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("UserSeries");
                });

            modelBuilder.Entity("FilmSelector.Models.Date", b =>
                {
                    b.HasOne("FilmSelector.Models.Film", "DailyFilm")
                        .WithMany()
                        .HasForeignKey("DailyFilmId");

                    b.HasOne("FilmSelector.Models.Series", "DailySeries")
                        .WithMany()
                        .HasForeignKey("DailySeriesId");
                });

            modelBuilder.Entity("FilmSelector.Models.UserFilm", b =>
                {
                    b.HasOne("FilmSelector.Models.Film", "Film")
                        .WithMany("Users")
                        .HasForeignKey("FilmId");

                    b.HasOne("FilmSelector.Models.User", "User")
                        .WithMany("Films")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FilmSelector.Models.UserSeries", b =>
                {
                    b.HasOne("FilmSelector.Models.Series", "Series")
                        .WithMany("Users")
                        .HasForeignKey("SeriesId");

                    b.HasOne("FilmSelector.Models.User", "User")
                        .WithMany("Series")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
