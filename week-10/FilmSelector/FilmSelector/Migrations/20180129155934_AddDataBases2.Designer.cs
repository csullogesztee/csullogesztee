// <auto-generated />
using FilmSelector.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace FilmSelector.Migrations
{
    [DbContext(typeof(SelectorContext))]
    [Migration("20180129155934_AddDataBases2")]
    partial class AddDataBases2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FilmSelector.Models.Calendar", b =>
                {
                    b.Property<DateTime>("Date");

                    b.HasKey("Date");

                    b.ToTable("Calendar");
                });

            modelBuilder.Entity("FilmSelector.Models.Film", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<long?>("CreatorId");

                    b.Property<DateTime>("Date");

                    b.Property<double>("IMBBScore");

                    b.Property<string>("IMDBLink");

                    b.Property<string>("Style");

                    b.Property<string>("Title");

                    b.Property<bool>("Watched");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("FilmSelector.Models.Program", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<long?>("CreatorId");

                    b.Property<DateTime>("Date");

                    b.Property<double>("IMBBScore");

                    b.Property<string>("IMDBLink");

                    b.Property<string>("Style");

                    b.Property<string>("Title");

                    b.Property<bool>("Watched");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Date");

                    b.ToTable("Program");
                });

            modelBuilder.Entity("FilmSelector.Models.Series", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<long?>("CreatorId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("Ended");

                    b.Property<double>("IMBBScore");

                    b.Property<string>("IMDBLink");

                    b.Property<string>("Language");

                    b.Property<int>("Seasons");

                    b.Property<int>("Started");

                    b.Property<string>("Style");

                    b.Property<string>("Title");

                    b.Property<bool>("Watched");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("FilmSelector.Models.User", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FilmSelector.Models.Film", b =>
                {
                    b.HasOne("FilmSelector.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("FilmSelector.Models.Program", b =>
                {
                    b.HasOne("FilmSelector.Models.User", "Creator")
                        .WithMany("Programs")
                        .HasForeignKey("CreatorId");

                    b.HasOne("FilmSelector.Models.Calendar")
                        .WithMany("Programs")
                        .HasForeignKey("Date")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FilmSelector.Models.Series", b =>
                {
                    b.HasOne("FilmSelector.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });
#pragma warning restore 612, 618
        }
    }
}
